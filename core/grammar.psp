<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<title>HYMMNOSERVER - Grammar Evaluator</title>
		<!-- <%="-->"%>
<%
import cgi
import urllib
from mod_python import apache
_WORKING_PATH = "/your_core_path/"

transformations = apache.import_module('transformations', path=[_WORKING_PATH + "common/"])

_db_con = None
_query = None
if form.has_key('query'):
	_query = form['query'].strip()
	if _query:
		_db = apache.import_module('your_module_name', path=["/your_module_path/"])
		_db_con = _db.getConnection()
		
def _renderMicroTransformation(component):
	link = "/hymmnoserver/search.php?" + urllib.urlencode({'word': component})
	line = cgi.escape(component, True)
	req.write("""<td class="transformation">""")
	req.write("""<div style="font-family: hymmnos; font-size: 1.5em;"><a href="%s" style="display: block; color: #00008B; text-decoration: none; outline: none;">%s</a></div>""" % (link, line))
	req.write("""<div><a href="%s" style="display: block; color: #00008B; text-decoration: none; outline: none;">%s</a></div>""" % (link, line))
	req.write("</td>")
	
def _renderMacroTransformation(phrase, components, unknown):
	req.write("""<table style="border-spacing: 1px; color: white; background: #808080; border: 1px solid black; width: 100%;">""")
	req.write("""<tr><td style="color: #00008B; background: #D3D3D3; padding-left: 5px; padding-top: 5px; padding-right: 2px;" colspan="2">""")
	req.write("""<div style="font-family: hymmnos; font-size: 18pt;">%s</div>""" % (phrase))
	req.write("""<div style="font-size: 12pt;">%s</div>""" % (phrase))
	req.write("""</td></tr>""")
	for (i, lines) in enumerate(components):
		req.write("""<tr><td class="transformation-id">%i</td>""" % (i))
		if len(lines) > 1:
			req.write("""<td style="background: #808080;"><table style="width: 100%; border-spacing: 1px;">""")
			for (j, line) in enumerate(lines):
				req.write("""<tr><td class="transformation-id">%i</td>""" % (j))
				_renderMicroTransformation(line)
				req.write("</td></tr>")
			req.write("</table></td>")
		else:
			_renderMicroTransformation(lines[0])
		req.write("</tr>")
	if(unknown):
		plural = ''
		if len(unknown) > 1:
			plural = 's'
		req.write("""<tr><td style="color: white; background: black;" colspan="2">""")
		req.write("""<div style="font-size: 10pt;">Unknown word%s: %s</div>""" % (plural, cgi.escape(", ".join(unknown), True)))
		req.write("""</td></tr>""")
	req.write("</table>")

%>
		<%@include file="common/resources.xml" %>
		<%="<!--"%> -->
	</head>
	<body>
		<div id="no-python">
			<p>
				Unfortunately, this mirror does not have mod_python, so this
				portion of the site is unavailable.
			</p>
		</div>
		<!-- <%="-->"%>
		<div>
			<script type="text/javascript">
				/*<![CDATA[*/
					document.getElementById("no-python").style.display = 'none';
				/*]]>*/
			</script>
			<noscript>
				<p>
					JavaScript was supposed to hide the statement above, but your browser does
					not support it, so just pretend that nothing's there.
				</p>
			</noscript>
			<%@include file="common/header.xml" %>
			
<%
if not _query:
%>
			Features that will appear here:
			<ul class="basic-inline">
				<li>
					Syntactic validation and structural processing
					<ul>
						<li>
							Enter a complete sentence and it will be evaluated; a syntax tree
							will be rendered, allowing you to study the structure of the phrase,
							which may help with translation efforts
						</li>
					</ul>
				</li>
				<li>
					Binasphere conversion				
					<ul>
						<li>Enter multiple sentences and a binasphere line will be generated</li>
						<li>Enter a binasphere line and its component sentences will be reconstructed</li>
					</ul>
				</li>
				<li>
					Persistent Emotion Sounds definition syntax
					<ul>
						<li>Enter a statement in this form, and the evaluated output will be rendered</li>
					</ul>
				</li>
			</ul>
			Note: This section is currently pre-alpha and highly incomplete.
<%
else:
	lines = [line.strip() for line in _query.splitlines() if line]
	try: #Attempt to evaluate as a Binasphere phrase, since this is cheap.
		(lines_list, unknown) = transformations.decodeBinasphere(' '.join(lines), _db_con)
		_renderMacroTransformation(cgi.escape(_query, True), lines_list, unknown)
	except transformations.FormatError:
		if len(lines) > 1:
			try:
				(new_lines, processed, unknown) = transformations.applyPersistentEmotionSounds(lines, _db_con)
				_renderMacroTransformation('<br/>'.join([cgi.escape(line) for line in new_lines]), processed, unknown)
			except transformations.FormatError:
				(phrase, lines_list, unknown) = transformations.encodeBinasphere(lines, _db_con)
				_renderMacroTransformation(cgi.escape(phrase, True), lines_list, unknown)
		else:
			req.write("Syntax evaluation not yet implemented")
	except transformations.ContentError, e:
		req.write("Unable to process input: %s" % e)
#	except Exception, e:
#		req.write("An unexpected error occurred: %s" % (e))

%>
			<hr/>
			<form method="get" action="/hymmnoserver/grammar.psp">
				<div>
					<textarea name="query" rows="5" cols="80"></textarea><br/>
					<input type="submit" value="process"/>
				</div>
			</form>
<%
if _db_con: _db_con.close()
%>
			<%@include file="common/footer-py.xml" %>
		</div>
		<%="<!--"%> -->
	</body>
</html>
